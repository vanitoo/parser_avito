name: Build and Release .exe

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  build:
    runs-on: windows-latest  # Важный момент: используем Windows для сборки .exe

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller

    - name: Install MinGW for strip
      run: |
        choco install mingw -y
        $env:PATH = "C:\ProgramData\chocolatey\bin;" + $env:PATH
      shell: pwsh


    - name: Build .exe with PyInstaller
      run: |
        pyinstaller --onefile --windowed --clean --strip AvitoParser.py

    - name: Upload .exe artifact
      uses: actions/upload-artifact@v3
      with:
        name: AvitoParser.exe  # Название артефакта
        path: dist/AvitoParser.exe  # Путь к скомпилированному .exe файлу


    - name: Create GitHub Release
      id: create_release
      run: |
        # Получение текущего тега релиза
        $RELEASE_TAG = git describe --tags --abbrev=0 2>$null
        
        if ($RELEASE_TAG) {
            Write-Host "Existing tag found: $RELEASE_TAG"
        } else {
            Write-Host "No existing tag found. Creating a new tag."
            $RELEASE_TAG = "v1.0.0"  # Если тега нет, начинаем с v1.0.0
        }
        
        # Разбиваем текущий тег на части
        $version_parts = $RELEASE_TAG.Substring(1).Split(".")
        $major = [int]$version_parts[0]
        $minor = [int]$version_parts[1]
        $patch = [int]$version_parts[2]
        
        # Логика увеличения версии
        $patch++
        if ($patch -ge 10) {
            $patch = 0
            $minor++
            if ($minor -ge 10) {
                $minor = 0
                $major++
            }
        }
        
        # Формируем новый тег версии
        $new_release_tag = "v$major.$minor.$patch"
        Write-Host "Initial new version: $new_release_tag"
        
        # Проверка наличия тега на удаленном репозитории и инкрементирование до уникального
        $existing_tags = git ls-remote --tags origin | ForEach-Object { $_ -replace '.*/(v\d+\.\d+\.\d+)$', '$1' }
        
        while ($existing_tags -contains $new_release_tag) {
            Write-Host "Tag $new_release_tag already exists on the remote. Incrementing patch version."
            $patch++
            if ($patch -ge 10) {
                $patch = 0
                $minor++
                if ($minor -ge 10) {
                    $minor = 0
                    $major++
                }
            }
            $new_release_tag = "v$major.$minor.$patch"
            Write-Host "New incremented version: $new_release_tag"
        }
        
        # Создание нового тега в Git и его пуш
        git tag $new_release_tag
        git push origin $new_release_tag
        
        # Создание релиза на GitHub
        gh release create $new_release_tag dist/AvitoParser.exe --title "Release $new_release_tag" --notes "Release notes for $new_release_tag"

#        #$RELEASE_TAG = git describe --tags --abbrev=0 2>$null
#        $RELEASE_TAG = "v" + (Get-Date -Format "yyyyMMddHHmmss")
#        if ($RELEASE_TAG) {
#            Write-Host "Existing tag found: $RELEASE_TAG"
#        } else {
#            Write-Host "No existing tag found. Creating a new tag."
#            $RELEASE_TAG = "v1.0.0"
#            git tag $RELEASE_TAG
#            git push origin $RELEASE_TAG --force
#        }
#        gh release create $RELEASE_TAG dist/AvitoParser.exe --title "Release $RELEASE_TAG" --notes "Release notes for $RELEASE_TAG"
      shell: pwsh
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

